<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Button_SendEmail" xml:space="preserve">
    <value>Send Email</value>
    <comment>Text on the send email button on the contact us page</comment>
  </data>
  <data name="Label_About" xml:space="preserve">
    <value>ABOUT</value>
    <comment>Button on the master page that links to the about the company and product page</comment>
  </data>
  <data name="Label_Contact" xml:space="preserve">
    <value>CONTACT</value>
    <comment>Button on the master page that links to the contact and feedback page</comment>
  </data>
  <data name="Label_Copyright" xml:space="preserve">
    <value>© GlucaTrack</value>
    <comment>Copyright at the bottom of the master page. (Does not include the year as its programmatically added)</comment>
  </data>
  <data name="Label_Download" xml:space="preserve">
    <value>DOWNLOAD</value>
    <comment>Button on the master page that links to the download page</comment>
  </data>
  <data name="Label_Email" xml:space="preserve">
    <value>Email:</value>
    <comment>Title of the email field on the contact us page</comment>
  </data>
  <data name="Label_Exclamation" xml:space="preserve">
    <value>!</value>
    <comment>Exclamation point after the welcome back message</comment>
  </data>
  <data name="Label_Home" xml:space="preserve">
    <value>HOME</value>
    <comment>Tab on the master page that links back to the home page</comment>
  </data>
  <data name="Label_Login" xml:space="preserve">
    <value>Log In</value>
    <comment>Link on the master page that sends the user to the login page</comment>
  </data>
  <data name="Label_Logout" xml:space="preserve">
    <value>Log Out</value>
    <comment>Link on the master page that logs the user out.</comment>
  </data>
  <data name="Label_Message" xml:space="preserve">
    <value>Message:</value>
    <comment>Title of the message field on the contact us page</comment>
  </data>
  <data name="Label_MessageStatus_Fail" xml:space="preserve">
    <value>Message failed to send to GlucaTrack.  Please try again later.</value>
    <comment>Displays if the email was not sent successfully from the contact page</comment>
  </data>
  <data name="Label_MessageStatus_Success" xml:space="preserve">
    <value>Your message has been successfully sent to GlucaTrack's staff.  We will respond as soon as possible.</value>
    <comment>Displays if the email was sent successfully from the contact page</comment>
  </data>
  <data name="Label_MyData" xml:space="preserve">
    <value>My Data</value>
    <comment>My data button on the master page that links to the dashboard</comment>
  </data>
  <data name="Label_Register" xml:space="preserve">
    <value>Register</value>
    <comment>Link on the master page that sends the user to the registration page</comment>
  </data>
  <data name="Label_WelcomeMessage" xml:space="preserve">
    <value>Welcome back, </value>
    <comment>Welcome message in the header if logged in</comment>
  </data>
</root>